<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	
	<!--1.开启包扫描  -->
	<context:component-scan base-package="com.jt"/>
	
	<!--2.引入外部配置文件  a.pro  b.pro c.pro  -->
    <!--<context:property-placeholder location="classpath:/property/*.properties" /> -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<!--Resource[] locations;  -->
			<list>
				<value>classpath:/property/jdbc.properties</value>
				<value>classpath:/property/redis.properties</value>
			</list>
		</property>
	</bean>

	<!--3.配置数据源  -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
	</bean>
	
	<!--4.开启事务策略  -->
	<tx:annotation-driven/>
	
	<!--5.声明式事务处理  利用AOP原理实现
	 AOP:在不影响原有业务的前提下,对方法进行扩展
	 注意事项:
	 	1.切入点
	 	2.需要设定通知 
	 		环绕/前置/后置/异常/最终   
	-->
	<!--5.1配置事务管理器 主要作用 事务提交/回滚  -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!--5.2编辑事务通知   环绕通知-->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!--配置事务策略
			propagation="REQUIRED"  执行save方法时,必须添加一个事务
			propagation="SUPPORTS"  表示事务支持的,原来有事务则添加事务
			
			事务回滚策略:
				1.运行时异常   事务自动回滚
				2.编译异常       事务不负载回滚
				rollback-for="指定异常类型 回滚" 
				no-rollback-for="指定异常类型 不回滚"
		  -->
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="*"     propagation="SUPPORTS" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<!--5.3配置事务切面  
		顺序:Content Model : (pointcut*, advisor*, aspect*)
		表达式:
			execution(返回值类型 包名.类名.方法名(参数列表))
	-->
	<aop:config>
		<aop:pointcut expression="execution(* com.jt.cart.service.*.*(..))" id="pc"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pc"/>
	</aop:config>
	
	
	
	
	

</beans>